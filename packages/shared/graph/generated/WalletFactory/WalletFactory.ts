// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class WalletCreated extends ethereum.Event {
  get params(): WalletCreated__Params {
    return new WalletCreated__Params(this);
  }
}

export class WalletCreated__Params {
  _event: WalletCreated;

  constructor(event: WalletCreated) {
    this._event = event;
  }

  get _id(): string {
    return this._event.parameters[0].value.toString();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _address(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class WalletFactory extends ethereum.SmartContract {
  static bind(address: Address): WalletFactory {
    return new WalletFactory("WalletFactory", address);
  }

  Wallets(param0: BigInt): Address {
    let result = super.call("Wallets", "Wallets(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_Wallets(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("Wallets", "Wallets(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createWallet(_owner: Address, _id: string): boolean {
    let result = super.call(
      "createWallet",
      "createWallet(address,string):(bool)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromString(_id)]
    );

    return result[0].toBoolean();
  }

  try_createWallet(_owner: Address, _id: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "createWallet",
      "createWallet(address,string):(bool)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromString(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateWalletCall extends ethereum.Call {
  get inputs(): CreateWalletCall__Inputs {
    return new CreateWalletCall__Inputs(this);
  }

  get outputs(): CreateWalletCall__Outputs {
    return new CreateWalletCall__Outputs(this);
  }
}

export class CreateWalletCall__Inputs {
  _call: CreateWalletCall;

  constructor(call: CreateWalletCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _id(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreateWalletCall__Outputs {
  _call: CreateWalletCall;

  constructor(call: CreateWalletCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
